
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOMMA DEQUAL DISTINT DIVIDE ELSE EQUAL GREATER GREATEREQUAL ID IF INT LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS NUMBER PLUS RBLOCK RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration \n     | fun_declarationvar_declaration : type_specifier ID SEMICOLONvar_declaration : type_specifier IDvar_declaration : type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONvar_declaration : type_specifier ID LBRACKET NUMBER RBRACKETtype_specifier : INTtype_specifier : VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_listparams : VOIDparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDparam : type_specifier ID LBRACKET RBRACKETcompound_stmt : LBLOCK local_declarations statement_list RBLOCKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt \n     | compound_stmt\n     | selection_stmt\n     | iteration_stmt\n     | return_stmtexpression_stmt : expression SEMICOLONexpression_stmt : expression errorexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN statementselection_stmt : IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURNreturn_stmt : RETURN expression SEMICOLONreturn_stmt : RETURN expressionexpression : var EQUAL expressionexpression : var error expressionexpression : simple_expressionvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS \n     | LESSEQUAL\n     | GREATER\n     | GREATEREQUAL\n     | DEQUAL\n     | DISTINT\n        additive_expression : additive_expression addop termadditive_expression : additive_expression addop error termadditive_expression : termaddop : PLUS \n                       | MINUS\n        term : term mulop factorterm : term mulop error factorterm : factormulop : TIMES\n     | DIVIDE\n     factor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERcall : ID LPAREN args RPAREN\n     args : args_list \n     | empty args_list : args_list COMMA expressionargs_list : expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,9,10,11,13,21,24,25,27,28,31,32,34,37,58,],[7,7,-3,-4,-5,-2,-7,-6,7,-9,7,-8,-12,-72,7,-22,-21,-20,-7,]),'VOID':([0,2,3,4,5,9,10,11,13,21,24,25,27,28,31,32,34,37,58,],[8,8,-3,-4,-5,-2,-7,-6,18,-9,8,-8,-12,-72,8,-22,-21,-20,-7,]),'$end':([1,2,3,4,5,9,10,11,21,25,27,37,],[0,-1,-3,-4,-5,-2,-7,-6,-9,-8,-12,-20,]),'ID':([6,7,8,11,15,18,21,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,],[10,-10,-11,-6,22,-11,-9,-8,-72,-72,-22,52,-21,-24,58,-20,-23,-25,-26,-27,-28,-29,-32,52,52,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,52,52,-36,-39,52,52,52,52,52,52,-47,-48,-49,-50,-51,-52,-56,-57,52,-61,-62,-63,-38,-40,-41,-45,-64,-53,52,-58,52,52,52,-44,-67,52,-54,-59,-33,-35,52,-34,]),'SEMICOLON':([10,11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,100,101,102,103,105,106,107,108,110,111,],[11,-6,25,-8,-72,-72,-22,45,-21,-24,-20,-23,-25,-26,-27,-28,-29,59,-32,64,-64,-42,-43,-46,-55,-60,-65,-66,11,-30,-31,-36,86,-63,-38,-40,-41,-45,-64,-53,-58,45,45,-44,-67,-54,-59,-33,-35,45,-34,]),'LBRACKET':([10,22,52,58,],[12,26,68,12,]),'LPAREN':([10,11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,],[13,-6,-9,-8,-72,-72,-22,47,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,61,47,63,47,-64,-42,69,-46,-55,-60,-65,-66,-7,-30,-31,47,47,-36,-39,47,47,47,47,47,47,-47,-48,-49,-50,-51,-52,-56,-57,47,-61,-62,-63,-38,-40,-41,-45,-64,-53,47,-58,47,47,47,-44,-67,47,-54,-59,-33,-35,47,-34,]),'RBLOCK':([11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,102,103,105,106,107,108,111,],[-6,-9,-8,-72,-72,-22,37,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,-44,-67,-54,-59,-33,-35,-34,]),'LBLOCK':([11,21,23,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,100,101,102,103,105,106,107,108,110,111,],[-6,-9,28,-8,-72,-72,-22,28,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,28,28,-44,-67,-54,-59,-33,-35,28,-34,]),'IF':([11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,100,101,102,103,105,106,107,108,110,111,],[-6,-9,-8,-72,-72,-22,46,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,46,46,-44,-67,-54,-59,-33,-35,46,-34,]),'WHILE':([11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,100,101,102,103,105,106,107,108,110,111,],[-6,-9,-8,-72,-72,-22,48,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,48,48,-44,-67,-54,-59,-33,-35,48,-34,]),'RETURN':([11,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,58,59,60,64,65,84,86,87,88,94,95,96,98,100,101,102,103,105,106,107,108,110,111,],[-6,-9,-8,-72,-72,-22,49,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,49,49,-44,-67,-54,-59,-33,-35,49,-34,]),'NUMBER':([11,12,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,],[-6,14,-9,-8,-72,-72,-22,57,-21,-24,-20,-23,-25,-26,-27,-28,-29,-32,57,57,-64,-42,-43,-46,-55,-60,-65,-66,-7,-30,-31,57,57,-36,-39,57,57,57,57,57,57,-47,-48,-49,-50,-51,-52,-56,-57,57,-61,-62,-63,-38,-40,-41,-45,-64,-53,57,-58,57,57,57,-44,-67,57,-54,-59,-33,-35,57,-34,]),'COMMA':([13,17,19,20,22,29,30,50,51,52,53,54,55,56,57,84,87,88,91,93,94,95,96,98,102,103,105,106,109,],[-72,24,-16,-17,-18,-15,-19,-64,-42,-43,-46,-55,-60,-65,-66,-63,-40,-41,104,-71,-45,-64,-53,-58,-44,-67,-54,-59,-70,]),'RPAREN':([13,16,17,18,19,20,22,29,30,50,51,52,53,54,55,56,57,62,69,83,84,85,87,88,90,91,92,93,94,95,96,98,102,103,105,106,109,],[-72,23,-13,-14,-16,-17,-18,-15,-19,-64,-42,-43,-46,-55,-60,-65,-66,84,-72,100,-63,101,-40,-41,103,-68,-69,-71,-45,-64,-53,-58,-44,-67,-54,-59,-70,]),'RBRACKET':([14,26,50,51,52,53,54,55,56,57,84,87,88,89,94,95,96,98,102,103,105,106,],[21,30,-64,-42,-43,-46,-55,-60,-65,-66,-63,-40,-41,102,-45,-64,-53,-58,-44,-67,-54,-59,]),'ELSE':([37,39,40,41,42,43,45,49,50,51,52,53,54,55,56,57,59,60,64,65,84,86,87,88,94,95,96,98,102,103,105,106,107,108,111,],[-20,-25,-26,-27,-28,-29,-32,-37,-64,-42,-43,-46,-55,-60,-65,-66,-30,-31,-36,-39,-63,-38,-40,-41,-45,-64,-53,-58,-44,-67,-54,-59,110,-35,-34,]),'error':([44,50,51,52,53,54,55,56,57,71,78,79,80,81,82,84,87,88,94,95,96,98,102,103,105,106,],[60,67,-42,-43,-46,-55,-60,-65,-66,97,-56,-57,99,-61,-62,-63,-40,-41,-45,-64,-53,-58,-44,-67,-54,-59,]),'EQUAL':([50,52,102,],[66,-43,-44,]),'TIMES':([50,52,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,81,-60,-65,-66,-63,-64,81,-58,-44,-67,81,-59,]),'DIVIDE':([50,52,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,82,-60,-65,-66,-63,-64,82,-58,-44,-67,82,-59,]),'LESS':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,72,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'LESSEQUAL':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,73,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'GREATER':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,74,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'GREATEREQUAL':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,75,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'DEQUAL':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,76,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'DISTINT':([50,52,53,54,55,56,57,84,95,96,98,102,103,105,106,],[-64,-43,77,-55,-60,-65,-66,-63,-64,-53,-58,-44,-67,-54,-59,]),'PLUS':([50,52,53,54,55,56,57,84,94,95,96,98,102,103,105,106,],[-64,-43,78,-55,-60,-65,-66,-63,78,-64,-53,-58,-44,-67,-54,-59,]),'MINUS':([50,52,53,54,55,56,57,84,94,95,96,98,102,103,105,106,],[-64,-43,79,-55,-60,-65,-66,-63,79,-64,-53,-58,-44,-67,-54,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,9,]),'var_declaration':([0,2,31,],[4,4,34,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,13,24,31,],[6,6,15,15,36,]),'params':([13,],[16,]),'param_list':([13,],[17,]),'param':([13,24,],[19,29,]),'empty':([13,28,31,69,],[20,32,35,92,]),'compound_stmt':([23,33,100,101,110,],[27,40,40,40,40,]),'local_declarations':([28,],[31,]),'statement_list':([31,],[33,]),'statement':([33,100,101,110,],[38,107,108,111,]),'expression_stmt':([33,100,101,110,],[39,39,39,39,]),'selection_stmt':([33,100,101,110,],[41,41,41,41,]),'iteration_stmt':([33,100,101,110,],[42,42,42,42,]),'return_stmt':([33,100,101,110,],[43,43,43,43,]),'expression':([33,47,49,61,63,66,67,68,69,100,101,104,110,],[44,62,65,83,85,87,88,89,93,44,44,109,44,]),'var':([33,47,49,61,63,66,67,68,69,70,71,80,97,99,100,101,104,110,],[50,50,50,50,50,50,50,50,50,95,95,95,95,95,50,50,50,50,]),'simple_expression':([33,47,49,61,63,66,67,68,69,100,101,104,110,],[51,51,51,51,51,51,51,51,51,51,51,51,51,]),'additive_expression':([33,47,49,61,63,66,67,68,69,70,100,101,104,110,],[53,53,53,53,53,53,53,53,53,94,53,53,53,53,]),'term':([33,47,49,61,63,66,67,68,69,70,71,97,100,101,104,110,],[54,54,54,54,54,54,54,54,54,54,96,105,54,54,54,54,]),'factor':([33,47,49,61,63,66,67,68,69,70,71,80,97,99,100,101,104,110,],[55,55,55,55,55,55,55,55,55,55,55,98,55,106,55,55,55,55,]),'call':([33,47,49,61,63,66,67,68,69,70,71,80,97,99,100,101,104,110,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'relop':([53,],[70,]),'addop':([53,94,],[71,71,]),'mulop':([54,96,105,],[80,80,80,]),'args':([69,],[90,]),'args_list':([69,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','Parser.py',46),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','Parser.py',62),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','Parser.py',70),
  ('declaration -> var_declaration','declaration',1,'p_declaration','Parser.py',76),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','Parser.py',77),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_1','Parser.py',83),
  ('var_declaration -> type_specifier ID','var_declaration',2,'p_var_declaration_1_error','Parser.py',92),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','Parser.py',104),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET','var_declaration',5,'p_var_declaration_2_error','Parser.py',112),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','Parser.py',123),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','Parser.py',129),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','Parser.py',135),
  ('params -> param_list','params',1,'p_params_1','Parser.py',143),
  ('params -> VOID','params',1,'p_params_2','Parser.py',155),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','Parser.py',162),
  ('param_list -> param','param_list',1,'p_param_list_2','Parser.py',170),
  ('param_list -> empty','param_list',1,'p_param_list_3','Parser.py',176),
  ('param -> type_specifier ID','param',2,'p_param_1','Parser.py',180),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','Parser.py',187),
  ('compound_stmt -> LBLOCK local_declarations statement_list RBLOCK','compound_stmt',4,'p_compound_stmt','Parser.py',194),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','Parser.py',212),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','Parser.py',220),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','Parser.py',223),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','Parser.py',232),
  ('statement -> expression_stmt','statement',1,'p_statement','Parser.py',236),
  ('statement -> compound_stmt','statement',1,'p_statement','Parser.py',237),
  ('statement -> selection_stmt','statement',1,'p_statement','Parser.py',238),
  ('statement -> iteration_stmt','statement',1,'p_statement','Parser.py',239),
  ('statement -> return_stmt','statement',1,'p_statement','Parser.py',240),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','Parser.py',247),
  ('expression_stmt -> expression error','expression_stmt',2,'p_expression_stmt_1_error','Parser.py',260),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','Parser.py',283),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','Parser.py',289),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','Parser.py',294),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','Parser.py',300),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','Parser.py',306),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt_1_error','Parser.py',312),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','Parser.py',324),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt_2_error','Parser.py',330),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','Parser.py',346),
  ('expression -> var error expression','expression',3,'p_expression_1_error','Parser.py',360),
  ('expression -> simple_expression','expression',1,'p_expression_2','Parser.py',373),
  ('var -> ID','var',1,'p_var_1','Parser.py',380),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','Parser.py',385),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','Parser.py',392),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','Parser.py',398),
  ('relop -> LESS','relop',1,'p_relop','Parser.py',404),
  ('relop -> LESSEQUAL','relop',1,'p_relop','Parser.py',405),
  ('relop -> GREATER','relop',1,'p_relop','Parser.py',406),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','Parser.py',407),
  ('relop -> DEQUAL','relop',1,'p_relop','Parser.py',408),
  ('relop -> DISTINT','relop',1,'p_relop','Parser.py',409),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','Parser.py',416),
  ('additive_expression -> additive_expression addop error term','additive_expression',4,'p_additive_expression_1_error','Parser.py',438),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','Parser.py',450),
  ('addop -> PLUS','addop',1,'p_addop','Parser.py',456),
  ('addop -> MINUS','addop',1,'p_addop','Parser.py',457),
  ('term -> term mulop factor','term',3,'p_term_1','Parser.py',465),
  ('term -> term mulop error factor','term',4,'p_term_1_error','Parser.py',476),
  ('term -> factor','term',1,'p_term_2','Parser.py',490),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser.py',499),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser.py',500),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','Parser.py',507),
  ('factor -> var','factor',1,'p_factor_2','Parser.py',513),
  ('factor -> call','factor',1,'p_factor_3','Parser.py',519),
  ('factor -> NUMBER','factor',1,'p_factor_4','Parser.py',524),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','Parser.py',530),
  ('args -> args_list','args',1,'p_args','Parser.py',537),
  ('args -> empty','args',1,'p_args','Parser.py',538),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','Parser.py',548),
  ('args_list -> expression','args_list',1,'p_args_list_2','Parser.py',557),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',564),
]
